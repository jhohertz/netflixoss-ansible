#!/bin/bash
# Copyright 2013 Answers for AWS LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Creates a Foundation EBS Volume based on the latest Ubuntu LTS release.
#
# This expects to run on an EC2 instance
#
# Code adapted from: alestic-git

# Include helper functions and variables
. _include.sh

echo "-- Create Foundation Volume --"
echo "Ubuntu version: $release $codename"
read -e -p "What size image would you like (Gb): " -i "$size" size
echo "Creating image size: $size Gb"
echo
echo "Remember, if anything goes wrong, you can attempt to clean up by running"
echo "  ./foundation-cleanup"
echo

########################################
# Host updates below
########################################

echo "Updating and installing packages needed to build the AMI"

# Update and install Ubuntu packages
export DEBIAN_FRONTEND=noninteractive
sudo perl -pi -e 's/^# *(deb .*multiverse)$/$1/' /etc/apt/sources.list
sudo add-apt-repository -y ppa:jhohertz/aws-ppa
sudo apt-get update
sudo -E apt-get upgrade -y
sudo -E apt-get install --no-install-recommends -y \
 ec2-ami-tools            \
 ec2-api-tools            \
 qemu-utils               \
 git-core

# Download base Ubuntu server image built by Canonical
image=/mnt/$imagename.img
imagedir=/mnt/$codename-cloudimg-$arch2
if [ ! -e $image ]; then
    echo "Downloading Ubuntu Image"
    wget -qO$image $imageurlhd00 
fi

echo "Creating EBS volume for image"
# Create and mount temporary EBS volume with file system to hold new AMI image
volumeid=$(ec2-create-volume --region $region --size $size --availability-zone $zone |
  cut -f2)
if [ "$volumeid" = "" ]; then
  echo "ERROR: Could not create EBS volume using 'ec2-create-volume'"
  echo "Make sure this EC2 instance is in a Role that has permission to create EBS volumes"
  exit 1
fi
echo "$volumeid" > /tmp/image.volume.id
instanceid=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-id)
ec2-attach-volume --region $region --device /dev/sdi --instance "$instanceid" "$volumeid"
dev=/dev/xvdi
while [ ! -e $dev ]
  do
  	echo -n "."
  	sleep 3
done
echo " Done"

echo "Writing disk image to EBS volume..."
sudo qemu-img convert -O host_device $image $dev
echo " Done"

echo "Rescanning partitions"
partprobe
echo " Done"

#echo "Resizing partition to fill EBS volume..."
#PART_START=$(parted $dev -ms unit s p | grep "^1" | cut -f 2 -d:)
#[ "$PART_START" ] || return 1
#fdisk $dev <<EOF
#p
#d
#1
#n
#p
#1
#$PART_START
#
#p
#w
#EOF
#echo " Done"
#
#echo "Resizing filesystem to fill partition..."
#resize2fs $dev
#echo " Done"

echo "Mounting Ubunutu image"
sudo mkdir -p $imagedir
sudo mount ${dev}1 $imagedir

echo "Mounting chroot /proc and /dev/pts"
#sudo chroot $imagedir rm -rf /dev/*
sudo chroot $imagedir mount -t proc none /proc
sudo mount -o bind /dev $imagedir/dev
#sudo chroot $imagedir mkdir -p -v /dev/pts
#sudo chroot $imagedir chmod 755 /dev/pts
#sudo chroot $imagedir mount -t devpts none /dev/pts
#sudo chroot $imagedir mknod -m 666 /dev/null c 1 3
#sudo chroot $imagedir mount -t devpts none /dev/pts

########################################
# Begin AMI modifications below
########################################

echo "Allow network access from chroot environment"
sudo rm -f $imagedir/etc/resolv.conf
sudo cp -f /etc/resolv.conf $imagedir/etc/

cat <<EOF | sudo tee $imagedir/usr/sbin/policy-rc.d > /dev/null
#!/bin/sh
exit 101
EOF
sudo chmod 755 $imagedir/usr/sbin/policy-rc.d
DEBIAN_FRONTEND=noninteractive

echo "Enabling multiverse repo"
sudo perl -pi -e 's/^# *(deb .*multiverse)$/$1/' \
  $imagedir/etc/apt/sources.list                 \
  $imagedir/etc/cloud/templates/sources.list.tmpl
echo "Enabling backports repo"
echo "deb http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse" | sudo tee -a $imagedir/etc/apt/sources.list

echo "Adding locale"
sudo -E chroot $imagedir locale-gen en_US.UTF-8

# Upgrade and install packages on the target file system
echo
echo "Updating and upgrading image"
sudo chroot $imagedir apt-get update
sudo -E chroot $imagedir apt-get dist-upgrade -y

echo "Installing new software on image"
# Install software
sudo -E chroot $imagedir                      \
  apt-get install --no-install-recommends -y  \
    coreutils                                 \
    git-core                                  \
    libapt-pkg4.12                            \
    make                                      \
    python-crypto                             \
    python-support                            \
    python-jinja2                             \
    python-pip                                \
    ansible


# Use XFS for the target root file system because it is better than ext4
#echo "Setting XFS config"
#sudo perl -pi -e 's/ext4/xfs/' $imagedir/etc/fstab
#sudo perl -pi -e 's/cloudimg/uec/' $imagedir/etc/fstab
#sudo perl -pi -e 's/cloudimg/uec/' $imagedir/boot/grub/menu.lst

sudo perl -pi -e 's/\(hd0\)/(hd0,0)/' $imagedir/boot/grub/menu.lst

### Now only working on EBS volume


echo
echo "DONE"
echo
echo "Volume Location: $imagedir"
echo "To do stuff inside the chroot environment:"
echo "sudo -E chroot $imagedir sudo su"
echo 
echo "When you are done customizing (which may be now), run:"
echo "  ./foundation-create-ami"
echo


